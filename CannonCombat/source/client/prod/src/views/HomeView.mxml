<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx		= 'http://ns.adobe.com/mxml/2009' 
		xmlns:s			= 'library://ns.adobe.com/flex/spark'
		title			= 'SFS2X Cannon Combat'
		width			= '800'
		height			= '480'
		initialize		= 'Main(event)'
		>
	
	<s:ToggleSwitch id='audioToggleSwitch' skinClass='spark.skins.mobile.ToggleSwitchSkin' styleName="toggleSwitch" selected='true' visible='false' />
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script> 
		<![CDATA[ 
			import mx.core.FlexGlobals;
			
			import sfs2x.games.cannoncombat.CannonCombat;
			import sfs2x.games.cannoncombat.config.Assets;
			import sfs2x.games.cannoncombat.config.Settings;
			import sfs2x.games.cannoncombat.managers.InstanceManager;
			import sfs2x.games.cannoncombat.utils.PositionUtils;
			
			
			
			/**
			 * Application entry point
			 */
			public function Main($e:Event):void
			{
				systemManager.stage.align = StageAlign.TOP_LEFT;
				systemManager.stage.scaleMode = StageScaleMode.NO_SCALE;
				systemManager.stage.frameRate = Settings.FRAME_RATE;
				systemManager.stage.setOrientation(StageOrientation.ROTATED_RIGHT);
				
				//Depending on which device the app is deployed to, we grab the screen's width and height
				//Because we force portrait mode, width and height are inverted
				//PS: If you are on debug/run mode, width and height should be inverted to run on the device via USB. Otherwise it will "cut" the graphics.
				//Below is set for a release build which can be installed on the device as an .apk file.
				/* Settings.APPLICATION_WIDTH = FlexGlobals.topLevelApplication.appWidth;
				Settings.APPLICATION_HEIGHT = FlexGlobals.topLevelApplication.appHeight;
				Settings.DEFAULT_WIN_WIDTH = FlexGlobals.topLevelApplication.appWidth;
				Settings.DEFAULT_WIN_HEIGHT = FlexGlobals.topLevelApplication.appHeight;*/
				//Below is set for debug/run modes and also for iOS, regardless if in iOS you are debuggin/running or deploying
				 Settings.APPLICATION_WIDTH = FlexGlobals.topLevelApplication.appHeight;
				Settings.APPLICATION_HEIGHT = FlexGlobals.topLevelApplication.appWidth;
				Settings.DEFAULT_WIN_WIDTH = FlexGlobals.topLevelApplication.appHeight;
				Settings.DEFAULT_WIN_HEIGHT = FlexGlobals.topLevelApplication.appWidth;
				
				//We have to add our spark component to the systemManager in order to be available in actionscript classes
				//Also style sheets need to be placed in the ViewNavigatorApplication document otherwise Flex throws an warning
				systemManager.stage.addChild(audioToggleSwitch);

				//Add a background color to the whole game
				var	sh	:Shape	= new Shape();
				sh.graphics.beginFill(0x000000);
				sh.graphics.drawRect(0, 0, Settings.APPLICATION_WIDTH, Settings.APPLICATION_HEIGHT);
				sh.graphics.endFill();
				systemManager.stage.addChild(sh);
				PositionUtils.center(sh, null, true, true);
				
				addEventListener(Event.CLOSING, closeApp, false, 0, true);
				
				//Main window
				systemManager.stage.addChild(genCannonCombat(this.title)); 
			}
			
			
			
			/**
			 * Returns an instance of our Main class
			 * 
			 * @param $winID :String - Identifier for window
			 */
			private function genCannonCombat($winID:String):CannonCombat
			{
				var cc:CannonCombat = new CannonCombat();
				cc.name = 'SFS2X Cannon Combat';
				cc.windowID = $winID;
				return cc;
			}
			
			
			
			//--------------------------------------------------------------------------
			//  EVENT HANDLERS
			//--------------------------------------------------------------------------
			
			
			
			/**
			 * Close main window/app
			 * 
			 * @param $e :Event
			 */
			private function closeApp($e:Event):void
			{
				var win		:Object			= $e.currentTarget as Object,
					stage	:Stage 			= systemManager.stage as Stage,
					app		:CannonCombat 	= stage.getChildAt(2) as CannonCombat,
					assets	:Assets;
				
				//Remove event listeners
				win.removeEventListener(Event.CLOSING, closeApp);
				
				//Stop all sounds
				InstanceManager.getSoundManagerInstance(app.windowID).stopAllSounds();
				
				//Destroy global references and dispose bitmaps
				InstanceManager.destroy(app.windowID);
				
				//Clear display list
				while (stage.numChildren)
				{
					var child:*  = stage.removeChildAt(0);
					if('destroy' in child) child.destroy();
					child = null;
				}
				
				//Destroy global dictionary
				Settings.destroy(app.windowID);
				
				//Remove references in our app
				app = null;
				assets = null;
				
				//Close native window
				stage.nativeWindow.close();
				
				stage = null;
				win = null;
				
				//Run GC
				flash.system.System.gc(); 
			}
		]]> 
	</fx:Script>
</s:View>
